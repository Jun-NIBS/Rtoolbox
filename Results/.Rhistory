args=c('FullCombination_test','Expression_test_tumor.txt','Meth_test_tumor.txt','CNV_test_tumor.txt')
PatientID=args[1] #'FullCombination_test'
Expfile=args[2] #'ExpressionData.txt'
Expfile_clean=gsub("_",x=Expfile,replacement="\\\\_")#Escapes "_" in Expfile names
Methfile=args[3] #'MethData.txt'
Methfile_clean=gsub("_",x=Methfile,replacement="\\\\_")#Escapes "_" in Methfile names
CNVfile=args[4] #'CNVData.txt'
CNVfile_clean=gsub("_",x=CNVfile,replacement="\\\\_")#Escapes "_" in CNVfile names
if (Methfile=='NA'&CNVfile=='NA') {DataCombi=1} else #Expression
if (Expfile=='NA'&CNVfile=='NA') {DataCombi=2} else #Methylation
if (Expfile=='NA'&Methfile=='NA') {DataCombi=3} else #CNV
if (CNVfile=='NA') {DataCombi=4} else #Expression+Meth
if (Methfile=='NA') {DataCombi=5} else #Expression+CNV
if (Expfile=='NA') {DataCombi=6} else #Meth+CNV
{DataCombi=7} #Expression+Meth+CNV
DataCombi
WPMVcutoff=80 #Require at least X percent (weighted) of model variables to be available in input data
###Determine path and name of script being run
R_script=sub("--file=", "", args.all[grep("--file=", args.all)])
R_script_name=strsplit(R_script,"/")[[1]][length(strsplit(R_script,"/")[[1]])] 
script_path=paste(getwd(),R_script_name,sep="/")
script_path=gsub("_",x=script_path,replacement="\\\\_") #Escapes "_" in path names
###Libraries
library(preprocessCore)
library(randomForest)
###Set work directory
path='/Users/adaemen/Dropbox/drug_predictors/Rscripts/Rtoolbox/'
#path='C:/Users/Obi/Documents/My Dropbox/drug_predictors/Rscripts/Rtoolbox/'
#path='/csb/home/obig/Projects/drug_predictors/Rtoolbox/'
setwd(path)
pathPatientFiles='TumorData/'
txt_output=paste(PatientID,"_results.txt",sep="")
tex_output=paste(PatientID,"_results.tex",sep="")
if (DataCombi==1|DataCombi==4|DataCombi==5|DataCombi==7) {
# Get patient expression data
ExpData=read.table(paste(pathPatientFiles,Expfile,sep=""),sep="\t",header=TRUE,row.names=1)
# Normalize/scale patient data to cell line data (U133A, exon-array, RNAseq)
#First load cell line data
CellLineEAData=read.csv(paste(path,'ExtraFiles/breastExon_genelevel_stringent.csv',sep=""),sep=",",header=TRUE, row.names=1)
CellLineU133AData=read.csv(paste(path,'ExtraFiles/Neve_AffyRMA_genelevel_maxvar_stringent.csv',sep=""),sep=",",header=TRUE, row.names=1)
CellLineRSData=read.table(paste(path,'ExtraFiles/breastRNAseq_genelevel_stringent.txt',sep=""),sep="\t",header=TRUE, row.names=3)
#Create mapping for RS data from gene name to long-format variable name, NOTE: this only works because in RNAseq stringent gene file, there is no ambiguity at gene symbol level
RSmapping=as.data.frame(paste(CellLineRSData[,"FID"],rownames(CellLineRSData),rownames(CellLineRSData),sep="__"))
rownames(RSmapping)=rownames(CellLineRSData)
#Strip extra columns from RS data
CellLineRSData=CellLineRSData[,4:length(colnames(CellLineRSData))]
#Limit input data to only genes actually in cell line data, if gene missing from input data, set to NA
ExpDataEA=ExpData[rownames(CellLineEAData),,drop=FALSE]
rownames(ExpDataEA)=rownames(CellLineEAData)
ExpDataU133A=ExpData[rownames(CellLineU133AData),,drop=FALSE]
rownames(ExpDataU133A)=rownames(CellLineU133AData)
ExpDataRS=ExpData[rownames(CellLineRSData),,drop=FALSE]
rownames(ExpDataRS)=as.vector(RSmapping[,1]) #replace RS gene names with long format
#Determine target distribution based on cell line data
EA.target=normalize.quantiles.determine.target(as.matrix(CellLineEAData))
RS.target=normalize.quantiles.determine.target(as.matrix(CellLineRSData))
U133A.target=normalize.quantiles.determine.target(as.matrix(CellLineU133AData))
#Set patient tumor data to target
data.EA=normalize.quantiles.use.target(as.matrix(ExpDataEA),EA.target)
data.RS=normalize.quantiles.use.target(as.matrix(ExpDataRS),RS.target)
data.U133A=normalize.quantiles.use.target(as.matrix(ExpDataU133A),U133A.target)
#Set variable names to match those in models, and add patient ID as column heading
data.EAG=data.EA #Necessary because different convention used for LSSVM and RF for naming of gene level EA variables
data.RS2=data.RS #Necessary because different convention used for LSSVM and RF for naming of gene level variables (RS_ vs RS__)
rownames(data.EA)=paste('EA__',rownames(ExpDataEA),sep="")
rownames(data.EAG)=paste('EA_G__',rownames(ExpDataEA),sep="")
rownames(data.RS)=paste('RS__',rownames(ExpDataRS),sep="")
rownames(data.RS2)=paste('RS_',rownames(ExpDataRS),sep="")
rownames(data.U133A)=paste('U133A__',rownames(ExpDataU133A),sep="")
colnames(data.EA)=PatientID
colnames(data.EAG)=PatientID
colnames(data.RS)=PatientID
colnames(data.RS2)=PatientID
colnames(data.U133A)=PatientID
setwd(path)
}
getwd()
data
if (DataCombi==2|DataCombi==4|DataCombi==6|DataCombi==7) {
# Get patient expression data
MethData=read.table(paste(pathPatientFiles,Methfile,sep=""),sep="\t",header=TRUE,row.names=1)
# Normalize/scale patient data to cell line data
#First load cell line data
CellLineMethData=read.csv(paste(path,'ExtraFiles/Methylation_stringent.csv',sep=""),sep=",",header=TRUE, row.names=1)
# Name conversion of cg-probe ids to genes
#Limit input data to only genes actually in cell line data, if gene missing from input data, set to NA
GeneProbeMapping.meth=read.csv(paste(path,'ExtraFiles/Methylation_annotation_stringent.csv',sep=""),sep=",",header=TRUE)
MethData=as.data.frame(MethData[as.vector(GeneProbeMapping.meth[,1]),1])
rownames(MethData)=GeneProbeMapping.meth[,1]
#Determine target distribution based on cell line data
Meth.target=normalize.quantiles.determine.target(as.matrix(CellLineMethData))
#Set patient tumor data to target
data.Meth=normalize.quantiles.use.target(as.matrix(MethData),Meth.target)
#Set variable names to match those in models, and add patient ID as column heading
rownames(data.Meth)=paste('Meth__',rownames(MethData),'__',as.vector(GeneProbeMapping.meth[,4]),sep="")
colnames(data.Meth)=PatientID
setwd(path)
}
if (DataCombi==3|DataCombi==5|DataCombi==6|DataCombi==7) {
# Get patient CNV data
CNVData=read.table(paste(pathPatientFiles,CNVfile,sep=""),sep="\t",header=TRUE,row.names=1)
# Normalize/scale patient data to cell line data
#First load cell line data
CellLineCNVData=read.csv(paste(path,'ExtraFiles/SNP6/SNP6_genelevel_stringent_std0.7.csv',sep=""),sep=",",header=TRUE,row.names=5)
CellLineCNVData=CellLineCNVData[,5:length(colnames(CellLineCNVData))]
#Limit input data to only genes actually in cell line data, if gene missing from input data, set to NA
CNVData=as.data.frame(CNVData[rownames(CellLineCNVData),,drop=FALSE])
rownames(CNVData)=rownames(CellLineCNVData)
#Determine target distribution based on cell line data
CNV.target=normalize.quantiles.determine.target(as.matrix(CellLineCNVData))
#Set patient tumor data to target
data.SNP=normalize.quantiles.use.target(as.matrix(CNVData),CNV.target)
#Set variable names to match those in models, and add patient ID as column heading
rownames(data.SNP)=paste('SNP__',rownames(CNVData),sep="")
colnames(data.SNP)=PatientID
setwd(path)
}
setwd(paste(path,'Results/',sep=""))
getwd()
drugs_interest=read.table(paste(path,'ExtraFiles/DrugCompounds.txt',sep=""),header=TRUE,sep="\t")
predictor_perf = data.frame(cbind(drugs_interest, Model=NA, DataCombination=NA, PercModelVars=NA, WtPercModelVars=NA, Score=NA, Probability=NA, Sensitivity=NA), stringsAsFactors=FALSE)
rownames(predictor_perf)=drugs_interest[[1]]
predictor_perf
predictor_mapping=read.table(paste(path,'ExtraFiles/PredictorsMapping_PlatformAgnosticToolbox_Expression.txt',sep=""),sep="\t",header=TRUE,row.names=1)
predictor_mapping
drugs_interest
drugs_interest[[1]]
for (drug_compound in drugs_interest[[1]]) {
#drug_compound=as.vector(drugs_interest[[1]][40]) #for testing purposes
drug_compound=as.vector(drug_compound)
model=as.character(predictor_mapping[drug_compound,DataCombi])
if (regexpr('_U133A_Meth_SNP_',model)[1]>0) {
DataCombiModel="U133A-Meth-SNP"
medianU133A=median(data.U133A[!is.na(data.U133A)])
data.U133A[is.na(data.U133A)]=medianU133A
medianMeth=median(data.Meth[!is.na(data.Meth)])
data.Meth[is.na(data.Meth)]=medianMeth
medianSNP=median(data.SNP[!is.na(data.SNP)])
data.SNP[is.na(data.SNP)]=medianSNP
CombiData_RF=rbind(data.U133A,data.Meth,data.SNP)
CombiData_LSSVM=rbind(data.U133A,data.Meth,data.SNP)
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(11,dim(data.U133A)[1]),rep(1,dim(data.Meth)[1]),rep(10,dim(data.SNP)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
} else if (regexpr('_RS_Meth_SNP_',model)[1]>0) {
DataCombiModel="RS-Meth-SNP"
medianRS=median(data.RS[!is.na(data.RS)])
data.RS[is.na(data.RS)]=medianRS
medianMeth=median(data.Meth[!is.na(data.Meth)])
data.Meth[is.na(data.Meth)]=medianMeth
medianSNP=median(data.SNP[!is.na(data.SNP)])
data.SNP[is.na(data.SNP)]=medianSNP
CombiData_RF=rbind(data.RS,data.Meth,data.SNP)
CombiData_LSSVM=rbind(data.RS2,data.Meth,data.SNP)
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(11,dim(data.RS2)[1]),rep(1,dim(data.Meth)[1]),rep(10,dim(data.SNP)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
} else if (regexpr('_EA_Meth_SNP_',model)[1]>0) {
DataCombiModel="EA-Meth-SNP"
medianEA=median(data.EA[!is.na(data.EA)])
data.EA[is.na(data.EA)]=medianEA
medianMeth=median(data.Meth[!is.na(data.Meth)])
data.Meth[is.na(data.Meth)]=medianMeth
medianSNP=median(data.SNP[!is.na(data.SNP)])
data.SNP[is.na(data.SNP)]=medianSNP
CombiData_RF=rbind(data.EA,data.Meth,data.SNP)
CombiData_LSSVM=rbind(data.EAG,data.Meth,data.SNP)
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(11,dim(data.EAG)[1]),rep(1,dim(data.Meth)[1]),rep(10,dim(data.SNP)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
} else if (regexpr('_U133A_Meth_',model)[1]>0) {
DataCombiModel="U133A-Meth"
medianU133A=median(data.U133A[!is.na(data.U133A)])
data.U133A[is.na(data.U133A)]=medianU133A
medianMeth=median(data.Meth[!is.na(data.Meth)])
data.Meth[is.na(data.Meth)]=medianMeth
CombiData_RF=rbind(data.U133A,data.Meth)
CombiData_LSSVM=rbind(data.U133A,data.Meth)
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(11,dim(data.U133A)[1]),rep(1,dim(data.Meth)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
} else if (regexpr('_U133A_SNP_',model)[1]>0) {
DataCombiModel="U133A-SNP"
medianU133A=median(data.U133A[!is.na(data.U133A)])
data.U133A[is.na(data.U133A)]=medianU133A
medianSNP=median(data.SNP[!is.na(data.SNP)])
data.SNP[is.na(data.SNP)]=medianSNP
CombiData_RF=rbind(data.U133A,data.SNP)
CombiData_LSSVM=rbind(data.U133A,data.SNP)
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(11,dim(data.U133A)[1]),rep(10,dim(data.SNP)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
} else if (regexpr('_RS_Meth_',model)[1]>0) {
DataCombiModel="RS-Meth"
medianRS=median(data.RS[!is.na(data.RS)])
data.RS[is.na(data.RS)]=medianRS
medianMeth=median(data.Meth[!is.na(data.Meth)])
data.Meth[is.na(data.Meth)]=medianMeth
CombiData_RF=rbind(data.RS,data.Meth)
CombiData_LSSVM=rbind(data.RS2,data.Meth)
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(11,dim(data.RS2)[1]),rep(1,dim(data.Meth)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
} else if (regexpr('_RS_SNP_',model)[1]>0) {
DataCombiModel="RS-SNP"
medianRS=median(data.RS[!is.na(data.RS)])
data.RS[is.na(data.RS)]=medianRS
medianSNP=median(data.SNP[!is.na(data.SNP)])
data.SNP[is.na(data.SNP)]=medianSNP
CombiData_RF=rbind(data.RS,data.SNP)
CombiData_LSSVM=rbind(data.RS2,data.SNP)
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(11,dim(data.RS2)[1]),rep(10,dim(data.SNP)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
} else if (regexpr('_EA_Meth_',model)[1]>0) {
DataCombiModel="EA-Meth"
medianEA=median(data.EA[!is.na(data.EA)])
data.EA[is.na(data.EA)]=medianEA
medianMeth=median(data.Meth[!is.na(data.Meth)])
data.Meth[is.na(data.Meth)]=medianMeth
CombiData_RF=rbind(data.EA,data.Meth)
CombiData_LSSVM=rbind(data.EAG,data.Meth)
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(11,dim(data.EAG)[1]),rep(1,dim(data.Meth)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
} else if (regexpr('_EA_SNP_',model)[1]>0) {
DataCombiModel="EA-SNP"
medianEA=median(data.EA[!is.na(data.EA)])
data.EA[is.na(data.EA)]=medianEA
medianSNP=median(data.SNP[!is.na(data.SNP)])
data.SNP[is.na(data.SNP)]=medianSNP
CombiData_RF=rbind(data.EA,data.SNP)
CombiData_LSSVM=rbind(data.EAG,data.SNP)
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(11,dim(data.EAG)[1]),rep(10,dim(data.SNP)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
} else if (regexpr('_Meth_SNP_',model)[1]>0) {
DataCombiModel="Meth-SNP"
medianMeth=median(data.Meth[!is.na(data.Meth)])
data.Meth[is.na(data.Meth)]=medianMeth
medianSNP=median(data.SNP[!is.na(data.SNP)])
data.SNP[is.na(data.SNP)]=medianSNP
CombiData_RF=rbind(data.Meth,data.SNP)
CombiData_LSSVM=rbind(data.Meth,data.SNP)
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(1,dim(data.Meth)[1]),rep(10,dim(data.SNP)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
} else if (regexpr('_U133A_',model)[1]>0) {
DataCombiModel="U133A"
medianU133A=median(data.U133A[!is.na(data.U133A)])
data.U133A[is.na(data.U133A)]=medianU133A
CombiData_RF=data.U133A
CombiData_LSSVM=data.U133A
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(11,dim(data.U133A)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
} else if (regexpr('_RS_',model)[1]>0) {
DataCombiModel="RS"
medianRS=median(data.RS[!is.na(data.RS)])
data.RS[is.na(data.RS)]=medianRS
CombiData_RF=data.RS
CombiData_LSSVM=data.RS2
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(11,dim(data.RS2)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
} else if (regexpr('_EA_',model)[1]>0) {
DataCombiModel="EA"
medianEA=median(data.EA[!is.na(data.EA)])
data.EA[is.na(data.EA)]=medianEA
CombiData_RF=data.EA
CombiData_LSSVM=data.EAG
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(11,dim(data.EAG)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
} else if (regexpr('_Meth_',model)[1]>0) {
DataCombiModel="Meth"
medianMeth=median(data.Meth[!is.na(data.Meth)])
data.Meth[is.na(data.Meth)]=medianMeth
CombiData_RF=data.Meth
CombiData_LSSVM=data.Meth
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(1,dim(data.Meth)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
} else if (regexpr('_SNP_',model)[1]>0) {
DataCombiModel="SNP"
medianSNP=median(data.SNP[!is.na(data.SNP)])
data.SNP[is.na(data.SNP)]=medianSNP
CombiData_RF=data.SNP
CombiData_LSSVM=data.SNP
rangeClKernel=mat.or.vec(1,dim(CombiData_LSSVM)[1])
rangeClKernel[1,]=c(rep(10,dim(data.SNP)[1]))
colnames(rangeClKernel)=rownames(CombiData_LSSVM)
}
if (regexpr('LSSVM',model)[1]>0) {
ModelDrug=read.table(paste(path,'ModelsAgnostic/',model,'.txt',sep=""),as.is=1)
TrainDrug=read.table(paste(path,'ModelsAgnostic/Trainingdata_',model,'.txt',sep=""),header=TRUE,sep="\t",row.names=1)
# Compare input data variables to model variables and determine if enough present for prediction
model_variables=rownames(TrainDrug)[2:length(rownames(TrainDrug))]
#First calculate simple percent of model variables found in the input data
PercModelVars=(length(which(rownames(CombiData_LSSVM)[which(!is.na(CombiData_LSSVM))] %in% model_variables))/length(model_variables))*100
#Next calculate a weighted percent where higher ranking variables count more towards percent
model_variable_ranks=seq(from=length(model_variables), to=1) #Best variable = largest rank value. LSSVM model variables already ordered by rank
input_variable_ranks=model_variable_ranks[which(model_variables %in% rownames(CombiData_LSSVM)[which(!is.na(CombiData_LSSVM))])]
WtPercModelVars=(sum(input_variable_ranks)/sum(model_variable_ranks))*100
Asigm=ModelDrug[[1]][1]
Bsigm=ModelDrug[[1]][2]
bcoeff=ModelDrug[[1]][3]
alpha=ModelDrug[[1]][-(1:3)]
target=as.matrix(TrainDrug[1,])
traindata=as.matrix(TrainDrug[-1,])
FeatureSubset=rownames(TrainDrug[-1,])
CombiSubData=as.data.frame(CombiData_LSSVM[FeatureSubset,])
rownames(CombiSubData)=FeatureSubset
rangeClKernelSub=rangeClKernel[1,FeatureSubset]
### Reduction to model features that are present in the input data file(s)
removal=which(is.na(CombiSubData[,1]))
if (length(removal)>0) {
traindata=traindata[-removal,]
FeatureSubset=FeatureSubset[-removal]
CombiSubData=as.data.frame(CombiSubData[-removal,])
rownames(CombiSubData)=FeatureSubset
rangeClKernel=rangeClKernelSub[FeatureSubset]
}
Kfeature=0
clinicalKernel <- function(i) {
clinicalKernelIntern <- function(j) {
Kfeature[j]=(rangeClKernel[i]-abs(traindata[i,j]-CombiSubData[i,]))
}
Kfeature=sapply(c(1:dim(traindata)[2]),clinicalKernelIntern)
Kfeature=Kfeature/rangeClKernel[i]
}
KtestPerFeature=sapply(c(1:length(FeatureSubset)),clinicalKernel)
Ktest=rowSums(KtestPerFeature)/length(FeatureSubset)
#Ktest=t(traindata) %*% as.matrix(CombiSubData)
latent=((alpha*target) %*% Ktest) + bcoeff
predictor_perf[drug_compound,"Score"]=format(latent,digits=5)
prob=1/(1+exp(Asigm*latent+Bsigm))
predictor_perf[drug_compound,"Probability"]=format(prob,digits=5)
predictor_perf[drug_compound,"Sensitivity"]=(prob>0.5)
predictor_perf[drug_compound,"Model"]="LSSVM"
predictor_perf[drug_compound,"DataCombination"]=DataCombiModel
predictor_perf[drug_compound,"PercModelVars"]=PercModelVars
predictor_perf[drug_compound,"WtPercModelVars"]=WtPercModelVars
} else if (regexpr('RF',model)[1]>0) {
RFdata=t(CombiData_RF)
load(file=paste(path,'ModelsAgnostic/',model,'.Rdata',sep=""))
# Compare input data variables to model variables and determine if enough present for prediction
# use CombiData_LSSVM because NA values not replaced as for CombiData_RF
model_variables=names(rf_model$importance[,1])
variable_importances=rf_model$importance[,4]
#First calculate simple percent of model variables found in the input data
PercModelVars=(length(which(rownames(CombiData_LSSVM)[which(!is.na(CombiData_LSSVM))] %in% model_variables))/length(model_variables))*100
#Next calculate a weighted percent where higher ranking variables count more towards percent
model_variable_ranks=order(variable_importances) #Best variable (largest var imp) = largest rank value
input_variable_ranks=model_variable_ranks[which(model_variables %in% rownames(CombiData_LSSVM)[which(!is.na(CombiData_LSSVM))])]
WtPercModelVars=(sum(input_variable_ranks)/sum(model_variable_ranks))*100
RF_predictions_response=predict(rf_model, RFdata, type="response")
RF_predictions_prob=predict(rf_model, RFdata, type="prob")
RF_predictions_vote=predict(rf_model, RFdata, type="vote", norm.votes=FALSE)
predictor_perf[drug_compound,"Score"]=RF_predictions_vote[1,"sensitive"]
predictor_perf[drug_compound,"Probability"]=format(RF_predictions_prob[1,"sensitive"],digits=5)
predictor_perf[drug_compound,"Sensitivity"]=RF_predictions_response=="sensitive"
predictor_perf[drug_compound,"Model"]="RF"
predictor_perf[drug_compound,"DataCombination"]=DataCombiModel
predictor_perf[drug_compound,"PercModelVars"]=PercModelVars
predictor_perf[drug_compound,"WtPercModelVars"]=WtPercModelVars
}
}
predictor_perf
predictor_perf[which(predictor_perf[,"Sensitivity"]==TRUE),"Sensitivity"]="+"
predictor_perf[which(predictor_perf[,"Sensitivity"]==FALSE),"Sensitivity"]="-"
#Apply cutoffs to limit results to only those drugs with sufficient input data
predictor_perf[predictor_perf[,"WtPercModelVars"]<WPMVcutoff,"Score"]=NA
predictor_perf[predictor_perf[,"WtPercModelVars"]<WPMVcutoff,"Probability"]=NA
predictor_perf[predictor_perf[,"WtPercModelVars"]<WPMVcutoff,"Sensitivity"]=NA
### Order results in decreasing predicted probability of response
prob_order=order(predictor_perf[,"Probability"],decreasing=TRUE)
predictor_perf=predictor_perf[prob_order,]
if (length(which(!is.na(predictor_perf[,"Probability"])))>0){
recommended_treatment=rownames(predictor_perf)[which(predictor_perf[,"Probability"]==max(predictor_perf[,"Probability"], na.rm=TRUE))]
}else{
recommended_treatment="NA"
}
#recommended_treatment
### Save results to txt file
write.table(predictor_perf, file=txt_output, sep="\t", row.names=FALSE)
# Format results for print to pdf
predictor_perf[,"PercModelVars"]=format(predictor_perf[,"PercModelVars"], digits=2)
predictor_perf[,"WtPercModelVars"]=format(predictor_perf[,"WtPercModelVars"], digits=2)
predictor_perf[,"Probability"]=format(as.numeric(predictor_perf[,"Probability"]), digits=1)
predictor_perf
sink(tex_output)
cat ("\\documentclass{article}\n")
cat ("\\usepackage{amsmath}\n")
cat ("\\usepackage{amscd}\n")
cat ("\\usepackage[tableposition=top]{caption}\n")
cat ("\\usepackage{ifthen}\n")
cat ("\\usepackage[utf8]{inputenc}\n")
cat ("\\usepackage[hmargin=3cm,vmargin=3cm]{geometry}\n")
cat ("\\usepackage{hyperref}\n")
cat ("\\usepackage[bottom]{footmisc}\n")
cat ("\\hypersetup{\n")
cat ("   colorlinks = true,\n")
cat ("   linkcolor = blue}\n")
cat ("\\begin{document}\n")
cat ("\\title{Treatment Response Prediction Report}\n")
cat ("\\author{Anneleen Daemen and Obi Griffith (PI: Spellman/Gray)}\n")
cat ("\\maketitle\n")
cat ("\\subsubsection*{Sample Information:}\n")
cat ("Expression File:",Expfile_clean,"\n")
cat ("\n")
cat ("Methylation File:",Methfile_clean,"\n")
cat ("\n")
cat ("Copy Number File:",CNVfile_clean,"\n")
cat ("\\subsubsection*{Recommended Treatment:}\n")
cat (recommended_treatment,"\n")
cat ("\\subsubsection*{Treatment Response Predictions:\\footnote[1]{Patient considered sensitive to treatment if probability is greater than 0.5}}\n")
cat ("\\begin{tabular}{| l || l | l | c | c | c | c | c |}\n")
cat ("\\hline\n")
#Create results table:
cat ("Treatment & Model & Data & PMV\\footnote[2] & WPMV\\footnote[3] & Score & Probability & Sensitivity \\\\ \\hline \n")
#Loop through and print row for each drug
for (i in 1:20){
drug_clean=gsub("_",x=predictor_perf[i,1],replacement="\\\\_")#Escapes "_" in drug names
cat (drug_clean," & ",predictor_perf[i,2]," & ",predictor_perf[i,3]," & ",predictor_perf[i,4]," & ",predictor_perf[i,5]," & ",predictor_perf[i,6]," & ",predictor_perf[i,7]," & ",predictor_perf[i,8]," \\\\ \\hline \n")
}
cat ("\\end{tabular}\n")
cat ("\\footnotetext[2]{Percent model variables present in input data}\n")
cat ("\\footnotetext[3]{Weighted percent model variables present in input data}\n")
cat ("\\footnotetext[4]{Code location:",script_path,"}\n")
q()
